using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace Zensar.casestudy.day1
{
    class Student
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string DateOfBirth { get; set; }
        public Student()
        {
        }
        public Student(int Id, string Name, string DateOfBirth)
        {
            this.Id = Id;
            this.Name = Name;
            this.DateOfBirth = DateOfBirth;
        }
    }
    class Course
    {
        public int CID { get; set; }
        public string CName { get; set; }
        public string Duration { get; set; }
        public int Fees { get; set; }
        public Course()
        {
        }
        public Course(int CID, string CName, string Duration, int Fees)
        {
            this.CID = CID;
            this.CName = CName;
            this.Duration = Duration;
            this.Fees = Fees;
        }
    }
    class Info
    {
        public void display(Student s1)
        {
            Console.WriteLine("Student Details :");
            Console.WriteLine("Student ID:" + s1.Id);
            Console.WriteLine("Student Name:" + s1.Name);
            Console.WriteLine("Student DOB:" + s1.DateOfBirth);
            Console.WriteLine();
        }
        public void Display(Course c)
        {
            Console.WriteLine("Course Details: \n");
            Console.WriteLine("Course ID: " + c.CID);
            Console.WriteLine("Course Name: " + c.CName);
            Console.WriteLine("Course Duration: " + c.Duration);
            Console.WriteLine("Course Fees: " + c.Fees);
            Console.WriteLine();
        }
    }
    class Enroll
    {
        private Student student { get; set; }
        private Course course { get; set; }
        private DateTime enrollmentDate { get; set; }
        public Enroll(Student student, Course course, DateTime enrollmentDate)
        {
            this.student = student;
            this.course = course;
            this.enrollmentDate = enrollmentDate;
        }
    }
    
    abstract class UserInterface
    {
        public abstract void showFirstScreen();
        public abstract void showStudentScreen();
        public abstract void showAdminScreen();
        public abstract void showAllStudentsScreen();
        public abstract void showStudentRegistrationScreen();
        public abstract void introduceNewCourseScreen();
        public abstract void showAllCoursesScreen();
    }
    
    class App
    {
        public static void Scenario_1()
        {
            Console.WriteLine("----------------Student Class Scenario1------------------");
            Info info = new Info();
            Student st = new Student(1, "Adhi", "21-01-1998");
            info.display(st);
            Student st1 = new Student(2, "Bhanu", "12-9-1997");
            info.display(st1);
            Student st2 = new Student(3, "Chinni", "14-8-1999");
            info.display(st2);
        }
        public static void Scenario_2()
        {
            Console.WriteLine("------------------Student Class Scenario 2---------------");
            Student[] Stud = new Student[3];
            Info info1 = new Info();
            Stud[0] = new Student(11, "Arun", "23-05-1999");
            Stud[1] = new Student(12, "Bhargav", "21-9-1998");
            Stud[2] = new Student(13, "Swathi", "15-9-1997");
            for (int i = 0; i < Stud.Length; i++)
            {



                info1.display(Stud[i]);
                Console.WriteLine();
            }
        }
        public static void Scenario_3()
        {
            Console.WriteLine("---------------Student Class Scenario 3-----------------");
            Console.WriteLine("Enter n Value to insert student details");
            int n = Convert.ToInt32(Console.ReadLine());
            Student[] std = new Student[n];
            for (int i = 0; i < std.Length; i++)
            {
                Console.WriteLine("Enter Student ID: ");
                int ID = Convert.ToInt32(Console.ReadLine());
                Console.WriteLine("Enter Name of the Student: ");
                string Name = Console.ReadLine();
                Console.WriteLine("Enter Student Date of Birth:");
                string DOB = Console.ReadLine();
                Student s1 = new Student(ID, Name, DOB);
                std[i] = s1;
            }
            foreach (var r in std)
            {
                Console.WriteLine("\nStudent ID:{0}\nStudent Name:{1}\nStudent DOB:{2}\n", r.Id, r.Name, r.DateOfBirth);
            }
        }
        public static void CScenario_1()
        {
            Info info = new Info();
            Console.WriteLine("----------------Course Class Scenario1------------------");
            Course c1 = new Course(1001, "C", "3 Months", 1500);
            info.Display(c1);
            Course c2 = new Course(1002, "Core Java", "6 Months", 6000);
            info.Display(c2);
            Course c3 = new Course(1003, "HTML", "1 Month", 1200);
            info.Display(c3);
        }
        public static void CScenario_2()
        {
            Console.WriteLine("-----------------Course Class Scenario 2---------------");
            Course[] c = new Course[3];
            Info info = new Info();
            c[0] = new Course(1004, "CPP", "5 Months", 6500);
            c[1] = new Course(1005, "Cyber Security", "4 Months", 8000);
            c[2] = new Course(1006, "Ethical Hacking", "3 Months", 6000);
            for (int i = 0; i < c.Length; i++)
            {
                info.Display(c[i]);
                Console.WriteLine();
            }
        }
        public static void CScenario_3()
        {
            Console.WriteLine("---------------Course Class Scenario 3-----------------");
            Console.WriteLine("Enter n Value to insert student details");
            int n = Convert.ToInt32(Console.ReadLine());
            Course[] c1 = new Course[n];
            for (int i = 0; i < c1.Length; i++)
            {
                Console.WriteLine("Enter Course ID: ");
                int CID = Convert.ToInt32(Console.ReadLine());
                Console.WriteLine("Enter Course Name : ");
                string CName = Console.ReadLine();
                Console.WriteLine("Enter Course Duration :");
                string Duration = Console.ReadLine();
                Console.WriteLine("Enter Course Fees :");
                int Fees = Convert.ToInt32(Console.ReadLine());
                Course c = new Course(CID, CName, Duration, Fees);
                c1[i] = c;
            }
            foreach (var r in c1)
            {
                Console.WriteLine("\nCourse ID:{0}\nCourse Name:{1}\nCourse Duration:{2}\nCourse Fees:{3}", r.CID, r.CName, r.Duration, r.Fees);
            }
        }
        static void Main(string[] args)
        {
            Scenario_1();
            Scenario_2();
            Scenario_3();
            CScenario_1();
            CScenario_2();
            CScenario_3();
            Institute_Details IU = new Institute_Details();
            IU.showFirstScreen();
            Console.ReadLine();
            Console.ReadLine();





        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;

namespace Zensar.casestudy.day1
{
    class AppEngine
    {
        public static SqlCommand cmd;
        public static SqlDataReader dr;
        //public static SqlDataReader dr1;
        public static SqlConnection con;
        static SqlConnection getConnection()
        {

            con = new SqlConnection("data source=ADMW46ZLPC0907;initial catalog=venkat;" + "integrated security=true");
            con.Open();
            return con;

        }


        public void Show_all_registered_Students()
        {
            //whenever we need to retrieve total no.of students in the institute and there details from admin level
            con = getConnection();
            cmd = new SqlCommand("Select *from Student", con);
            int res = cmd.ExecuteNonQuery();
            dr = cmd.ExecuteReader();
            while (dr.Read())
            {
                Console.WriteLine("Student Details : ");
                Console.WriteLine("--------------------------");
                Console.WriteLine("Student Id : " + " " + dr[0]);
                Console.WriteLine("Student Name :" + " " + dr[1]);
                Console.WriteLine("Student DOB :" + " " + dr[2]);
                Console.WriteLine();
            }
        }

        public void New_StudentRegistration()
        {
            //Whenever we are trying to register for the Institution as a new user as well as admin can also updates new list of student in there institute
            //Console.WriteLine("New Student Registrations............!");
            int n;
            Console.WriteLine("Enter No. Of Student Details you need to insert: ");
            n = Convert.ToInt32(Console.ReadLine());
            for (int i = 0; i < n; i++)
            {
                con = getConnection();
                Console.WriteLine("Enter Student Details SId,StdName,Dob");
                int Id;
                string Name, DateOfBirth;
                Id = Convert.ToInt32(Console.ReadLine());
                Name = Console.ReadLine();
                DateOfBirth = Console.ReadLine();
                cmd = new SqlCommand("insert into Student values (@S_ID,@S_Name,@S_Dob)", con);
                cmd.Parameters.AddWithValue("@S_ID", Id);
                cmd.Parameters.AddWithValue("@S_Name", Name);
                cmd.Parameters.AddWithValue("@S_Dob", DateOfBirth);
                int res1 = cmd.ExecuteNonQuery();
                if (res1 > 0)
                {
                    Console.WriteLine("Student details inserted Sucessfully");
                }
                else
                    Console.WriteLine("Please enter valid Student details");
            }

        }
        public void Introducing_NewCourse()
        {
            //Admin trying to introduce new courses for there institution
            int num;
            Console.WriteLine("Enter No. Of Course Details you need to insert: ");
            num = Convert.ToInt32(Console.ReadLine());
            for (int i = 0; i < num; i++)
            {
                con = getConnection();
                Console.WriteLine("Enter Course Details CourseId,CourseName,Duration,Fee_Structure");
                int CId, Fees;
                string CName, Duration;
                CId = Convert.ToInt32(Console.ReadLine());
                CName = Console.ReadLine();
                Duration = Console.ReadLine();
                Fees = Convert.ToInt32(Console.ReadLine());
                cmd = new SqlCommand("insert into Course values (@C_ID,@C_Name,@C_Dur,@Fees)", con);
                cmd.Parameters.AddWithValue("@C_ID", CId);
                cmd.Parameters.AddWithValue("@C_Name", CName);
                cmd.Parameters.AddWithValue("@C_Dur", Duration);
                cmd.Parameters.AddWithValue("@Fees", Fees);
                int res2 = cmd.ExecuteNonQuery();
                if (res2 > 0)
                {
                    Console.WriteLine("Course details inserted Sucessfully");
                }
                else
                    Console.WriteLine("Please enter valid Course details");
            }
        }
        public void Available_Courses()
        {
            //Admin module reveals courses in there Institute
            con = getConnection();
            cmd = new SqlCommand("Select *from Course", con);
            int res6 = cmd.ExecuteNonQuery();
            Console.WriteLine("Courses Available In the Institution are................!");
            dr = cmd.ExecuteReader();
            while (dr.Read())
            {
                Console.WriteLine("Course Details : ");
                Console.WriteLine("--------------------------");
                Console.WriteLine("Course Id : " + " " + dr[0]);
                Console.WriteLine("Course Name :" + " " + dr[1]);
                Console.WriteLine("Course Duration :" + " " + dr[2]);
                Console.WriteLine("Course Fees :" + " " + dr[3]);
                Console.WriteLine();

            }

        }

        public void enrolling_Course()
        {
            con = getConnection();
            int SId, CID;
            DateTime Enroll_Date;
            Console.WriteLine("Enter Student Id");
            SId = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter Course Id");
            CID = Convert.ToInt32(Console.ReadLine());
            Enroll_Date = DateTime.UtcNow;
            cmd = new SqlCommand("insert into Enroll values(@cid,@S_id,@EnrollDate)", con);
            cmd.Parameters.AddWithValue("@cid", CID);
            cmd.Parameters.AddWithValue("@S_id", SId);
            cmd.Parameters.AddWithValue("@EnrollDate", Enroll_Date);
            int res3 = cmd.ExecuteNonQuery();
            if (res3 > 0)
            {
                Console.WriteLine("Student enrolled to the Course Sucessfully");
            }
            else
                Console.WriteLine("Please enter valid details");
        }

        public void Changes_inCourse()
        {

            con = getConnection();
            Console.WriteLine("Enter course Id you need to update: ");
            int cId = Convert.ToInt32(Console.ReadLine());
            string a;
            Console.WriteLine("Are you Sure you want to Update: Y/N ");
            a = Console.ReadLine();
            if (a == "Y" || a == "y")
            {
                Console.WriteLine("Enter New Course Duration");
                string CDur;
                CDur = Console.ReadLine();
                int Fees;
                Console.WriteLine("Enter New Course Fee");
                Fees = Convert.ToInt32(Console.ReadLine());
                cmd = new SqlCommand("update Course set C_Dur = @cdur,Fees=@fees where C_Id=@cid", con);
                cmd.Parameters.AddWithValue("@cid", cId);
                cmd.Parameters.AddWithValue("@cdur", CDur);
                cmd.Parameters.AddWithValue("@fees", Fees);
                int res4 = cmd.ExecuteNonQuery();
                if (res4 > 0)
                {
                    Console.WriteLine("Course updated Sucessfully");
                }
                else
                    Console.WriteLine("Please enter valid Course Id");

            }
            else
            {
                Console.WriteLine("You are not supposed to Update Course details...!");
            }
        }
        public void Changes_inStudDetails()
        {
            con = getConnection();
            Console.WriteLine("Enter Student Id you need to update: ");
            int SId = Convert.ToInt32(Console.ReadLine());
            string a;
            Console.WriteLine("Are you Sure you want to Update: Y/N ");
            a = Console.ReadLine();
            if (a == "Y" || a == "y")
            {
                Console.WriteLine("Enter New Student DOB :");
                string SDOB;
                SDOB = Console.ReadLine();
                string SName;
                Console.WriteLine("Enter Updated Student Name :");
                SName = Console.ReadLine();
                cmd = new SqlCommand("update Student set S_Dob = @sdob,S_Name=@sname where S_ID=@sid", con);
                cmd.Parameters.AddWithValue("@sdob", SDOB);
                cmd.Parameters.AddWithValue("@sname", SName);
                cmd.Parameters.AddWithValue("@sid", SId);
                int res5 = cmd.ExecuteNonQuery();
                if (res5 > 0)
                {
                    Console.WriteLine("Student details updated Sucessfully");
                }
                else
                    Console.WriteLine("Please enter valid Student Id to update");
            }
            else
            {
                Console.WriteLine("You are not supposed to update Student details...!");
            }
        }
        public void Deletion_OfCourse()
        {
            try
            {
                con = getConnection();
                Console.WriteLine("Enter course Id that you need to Delete: ");
                int cId = Convert.ToInt32(Console.ReadLine());
                string a;
                Console.WriteLine("Are you Sure you want to Delete: Y/N ");
                a = Console.ReadLine();
                if (a == "Y" || a == "y")
                {
                    cmd = new SqlCommand("delete Course where C_Id=@cid", con);
                    cmd.Parameters.AddWithValue("@cid", cId);
                    int res6 = cmd.ExecuteNonQuery();
                    if (res6 > 0)
                    {
                        Console.WriteLine("Course deleted Sucessfully");
                    }
                    else
                        Console.WriteLine("Please enter valid Course Id to delete");
                }
                else
                {
                    Console.WriteLine("You are not supposed to delete the course please try again...!");
                }
            }
            catch (SqlException se)
            {
                Console.WriteLine("Course cannot be deleted because students got enrolled", se);
            }
        }
        public void Delete_aStudent()
        {
            try
            {
                con = getConnection();
                Console.WriteLine("Enter Student Id that you need to Delete: ");
                int SId = Convert.ToInt32(Console.ReadLine());
                string a;
                Console.WriteLine("Are you Sure you want to Delete: Y/N ");
                a = Console.ReadLine();
                if (a == "Y" || a == "y")
                {
                    cmd = new SqlCommand("delete Student where S_ID=@sid", con);
                    cmd.Parameters.AddWithValue("@sid", SId);
                    int res7 = cmd.ExecuteNonQuery();
                    if (res7 > 0)
                    {
                        Console.WriteLine("Student deleted Sucessfully");
                    }
                    else
                        Console.WriteLine("Please enter valid Student Id to delete");
                }
                else
                {
                    Console.WriteLine("You are not supposed to delete the Student please try again...!");
                }
            }
            catch (SqlException se)
            {
                Console.WriteLine("OOPS...! Something went wrong", se);
            }
        }
        public void Student_Screen()
        {
            try
            {
                //whenever we are trying to retrieve particular student details
                con = getConnection();
                int SId;
                Console.WriteLine("Enter Student Id");
                SId = Convert.ToInt32(Console.ReadLine());
                cmd = new SqlCommand("select *from Student where S_ID=@SId", con);
                cmd.Parameters.AddWithValue("@SId", SId);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    Console.WriteLine("Student Details : ");
                    Console.WriteLine("--------------------------");
                    Console.WriteLine("Student Id : " + " " + dr[0]);
                    Console.WriteLine("Student Name :" + " " + dr[1]);
                    Console.WriteLine("Student DOB :" + " " + dr[2]);
                    Console.WriteLine();
                }
            }
            catch (SqlException se)
            {
                Console.WriteLine("Students Doesn't Exist.....Start New Registration", se);
            }

        }
        public void Retrieve_Particular_Course()
        {
            try
            {
                //whenever we are trying to retrieve particular student details
                con = getConnection();
                int CId;
                Console.WriteLine("Enter Course Id");
                CId = Convert.ToInt32(Console.ReadLine());
                cmd = new SqlCommand("select *from Course where C_Id=@cId", con);
                cmd.Parameters.AddWithValue("@cId", CId);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    Console.WriteLine("Particular Course Details : ");
                    Console.WriteLine("--------------------------");
                    Console.WriteLine("Course Id : " + " " + dr[0]);
                    Console.WriteLine("Course Name :" + " " + dr[1]);
                    Console.WriteLine("Course Duration :" + " " + dr[2]);
                    Console.WriteLine("Course Fees :" + " " + dr[3]);
                    Console.WriteLine();
                }
            }
            catch (SqlException se)
            {
                Console.WriteLine("Course Doesn't Exist...........!", se);
            }


        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Zensar.casestudy.day1
{
    class Institute_Details : UserInterface
    {
        string option;
        public override void showFirstScreen()
        {
            do
            {
                Console.WriteLine("Welcome to SMS(Student Management System)");
                Console.WriteLine("Tell us who you are : \n1. Student\n2. Admin");
                Console.WriteLine("Enter your choice ( 1 or 2) : ");
                int op = Convert.ToInt32(Console.ReadLine());
                switch (op)
                {
                    case 1:
                        showStudentScreen();
                        break;
                    case 2:
                        showAdminScreen();
                        break;
                    default:
                        Console.WriteLine("Enter valid Option....!");
                        break;
                }
                Console.WriteLine("Do you want to Continue in Main Screen Y or N");
                option = Console.ReadLine();
            } while ((option == "Y") || (option == "y"));
        }
        public override void showStudentScreen()
        {
            do
            {
                AppEngine ae = new AppEngine();
                Console.WriteLine("Select: \n1.Check your Details(Existing User)\n2.Registration(New User)\n3.Search Available Courses\n4.Enroll to Course in List");
                int op = Convert.ToInt32(Console.ReadLine());

                switch (op)
                {
                    case 1:
                        // Checks whether new registrartion or already existing user
                        ae.Student_Screen();
                        Console.WriteLine("Action Completed you may Exit....!");
                        break;
                    case 2://New registration
                        this.showStudentRegistrationScreen();
                        Console.WriteLine("Action Completed you may Exit....!");
                        break;
                    case 3:
                        //Showcase all available courses that student have an idea to enroll with particular CourseID during enrollment
                        Console.WriteLine("--------------------List of Courses------------------------");
                        ae.Available_Courses();
                        Console.WriteLine("Action Completed you may Exit....!");
                        break;

                    case 4:
                        //Student enrolling to particular course
                        ae.enrolling_Course();
                        Console.WriteLine("You have successfully enrolled you may Exit the Screen now");
                        break;
                    default:
                        Console.WriteLine("Enter valid Option....!");
                        break;

                }
                Console.WriteLine("Do you want to Continue in Student Screen Y or N");
                option = Console.ReadLine();

            }
            while ((option == "Y") || (option == "y"));
        }
        public override void showAdminScreen()
        {
            do
            {
                AppEngine aE = new AppEngine();
                Console.WriteLine("Select: \n1.Introduce New Course\n2.Courses Available\n3.Update Course Details\n4.Retrieve Particular Course in List\n5.Deleting Existing Student\n6.Delete Course\n7.Update Student Details\n8.AllRegistered Students");
                int op = Convert.ToInt32(Console.ReadLine());
                switch (op)
                {
                    case 1:
                        //If any new course want to add for Organization
                        this.introduceNewCourseScreen();
                        Console.WriteLine("Action Completed you may Exit....!");
                        break;
                    case 2:
                        //list of existing courses
                        Console.WriteLine("-------------All Available Courses in Institute-------------------");
                        this.showAllCoursesScreen();
                        Console.WriteLine("Action Completed you may Exit....!");
                        break;
                    case 3:
                        //updates in Course structure
                        aE.Changes_inCourse();
                        Console.WriteLine("Action Completed you may Exit....!");
                        break;
                    case 4:
                        //getting particular course details
                        aE.Retrieve_Particular_Course();
                        Console.WriteLine("Action Completed you may Exit....!");
                        break;
                    case 5:
                        //deletes particular student
                        aE.Delete_aStudent();
                        Console.WriteLine("Action Completed you may Exit....!");
                        break;
                    case 6:
                        //deletes existing course only that are not enrolled by any students
                        aE.Deletion_OfCourse();
                        Console.WriteLine("Action Completed you may Exit....!");
                        break;
                    case 7:
                        //modify existing student details
                        aE.Changes_inStudDetails();
                        Console.WriteLine("Action Completed you may Exit....!");
                        break;
                    case 8:
                        //retrieving all student details
                        aE.Show_all_registered_Students();
                        Console.WriteLine("Action Completed you may Exit....!");
                        break;
                    default:
                        Console.WriteLine("Enter valid Option....!");
                        break;

                }
                Console.WriteLine("Do you want to Continue in Admin Screen Y or N");
                option = Console.ReadLine();
            }
            while ((option == "Y") || (option == "y"));
        }
        public override void showAllStudentsScreen()
        {
            //Navigates to pool of students in Database
            AppEngine Ae = new AppEngine();
            Ae.Show_all_registered_Students();
            Console.WriteLine("Action Completed you may Exit....!");
        }
        public override void showStudentRegistrationScreen()
        {
            //navigates to registration block
            AppEngine A = new AppEngine();
            A.New_StudentRegistration();
        }
        public override void introduceNewCourseScreen()
        {
            // Navigates to registering new courses to academy
            AppEngine AE = new AppEngine();
            AE.Introducing_NewCourse();

        }
        public override void showAllCoursesScreen()
        {
            //Navigates to pool of Courses in Database
            AppEngine ape = new AppEngine();
            ape.Available_Courses();
        }
    }
}
